import { Component, OnInit, ViewChild } from "@angular/core";
import { PSscrollUtils, NgConstants } from "tgocp-ng/dist";
import { NgForm } from "@angular/forms";
import { OnboardingService } from "../../../../../services/onboarding.service";
import { DatePipe } from "@angular/common";
import { ActivatedRoute, Router, Params } from "@angular/router";
import * as _ from "lodash";
import { NotificationHandler } from "../../../../../util/exception/notfication.handler";
import { InvitationConstant } from "../invitation.constant";
import { TranslateService } from '@ngx-translate/core';

@Component({
  selector: 'create-invitation',
  templateUrl: "./invitation.component.html"
})
export class InvitationComponent implements OnInit {

  constructor(private onboardingService: OnboardingService, private router: Router, private translator: TranslateService,
    private datePipe: DatePipe, private route: ActivatedRoute, private notificationHandler: NotificationHandler) { }
  scrollConfig = PSscrollUtils.scrollY();
  invitation: any = {};
  recipientseEditMode: any[];
  ccEditMode: any[];
  invitationExtendedRequest: any[] = [];
  invitationRegx = /^[a-zA-Z0-9äöüÄÖÜ'":;?\/\\\~!@#\$%\^\&\)\(+=._\-\{\}\[\]\s]+$/;
  image: any = {};
  ediOptions: any[] = [{ 'label': 'Automatically generated by Trading Grid', 'value': 'SYSTEM_GENERATES' },
    /* { 'label': 'Trading partners will enter their own', 'value': 'MANUAL_ENTER' },
     { 'label': 'Manually provided when the TP is added', 'value': 'MANUAL_ENTER_FROM_PRELOAD
     { 'label': 'Assigned from a pre-loaded list of addresses', 'value': 'SYSTEM_GENERATES_FROM_PRELOAD' },
     { 'label': 'Recipient enters at registration', 'value': 'DURING_REG' }*/
  ]
  languageList: any[] = [{ 'label': 'English', 'value': 'en' },
  { 'label': 'French', 'value': 'fr' }]
  emailRegex: string = NgConstants.emailRegEx;
  // emailsRegex: string = "(*=.$)"+this.emailRegex ;
  invalidRecipientMail: boolean = false;
  invalidCCMail: boolean = false;
  listRecipients: any[] = [];
  ccList: any[] = [];
  ediAddressList: any[] = [];
  recipientLengthExceeded: boolean = false;
  ccLengthExceeded: boolean = false;
  minExpDateValue: Date = new Date();
  totalEdiAddress: number;
  ediAddressAfter: number = 0;
  ediAddressLimit: number = 20;
  @ViewChild("recipients") recipients;
  @ViewChild("ccRecipients") ccRecipients;
  invitationId: number;

  @ViewChild("invitationForm") invitationForm: NgForm;
  uploadImage: any = "";
  url: any;
  editMode: boolean = true;
  imageContent: any;
  imageType: string = "";
  isDateValid: boolean = true;
  taskBasedType: string = "taskBased";
  currentLanguage: string = "en";
  isEdiAddressMandatory: boolean;

  ngOnInit() {
    this.isEdiAddressMandatory = this.onboardingService.isEdiAddressMandatory();
    this.invitation.approvalType = 'AUTO';
    this.editMode = this.route.snapshot.data['editMode'];
    if (this.editMode == true) {
      this.invitationId = this.route.snapshot.params['id'];
      this.invitation = this.onboardingService.getCachedInvitationData();
      this.ccList = this.invitation.ccRecipients ? this.invitation.ccRecipients.split(",") : [];
      this.listRecipients = this.invitation.notificationEmailRecipients ? this.invitation.notificationEmailRecipients.split(",") : [];
      this.invitation.notificationEmailRecipientsEdit = "";
      this.invitation.ccRecipientsEdit = "";
      this.url = this.invitation.url;
      this.invitation.invitationExpirationDate = this.datePipe.transform(this.invitation.invitationExpirationDate, 'MM/dd/yyyy');
    }

    this.recipientseEditMode = [];
    this.ccEditMode = [];
    if (this.editMode == false) {
      this.invitation.invitationType = "UNIQUE";
      this.invitation.invitationExpirationDate = new Date();
      this.invitation.invitationExpirationDate.setDate(this.invitation.invitationExpirationDate.getDate() + 90);

      this.onboardingService.getEdiAddressCount().subscribe(data => {
        if (data['responseDetails']['success']) {
          this.totalEdiAddress = data['responseDetails']['responseEntity'].itemCount;
        }
      }, error => {
        if (this.isEdiAddressMandatory)
          this.notificationHandler.notify({ severity: 'error', details: error.userMessage });
      });
      this.ediAddressAfter = 0;
      this.getEdiAddressList(this.ediAddressAfter);
      this.loadData();
    }
    this.currentLanguage = this.translator.currentLang;
  }
  loadData() {
    this.route.queryParams.subscribe((params: Params) => {
      let cancel = params['cancel'];
      let isEdit = params['isEdit'];
      if (cancel == "true" || isEdit == "true") {
        this.invitation = this.onboardingService.getCachedInvitationData();
        this.url = this.invitation.url;

        this.uploadImage = this.invitation.imageproperties;
      } else {
        this.onboardingService.getWorkflow(this.onboardingService.selectedWorkFlow['workflowId']).subscribe(
          data => {
            if (data['responseDetails']['success']) {
              let selectedWorkflow = data['responseDetails']['responseEntity'];
            }
          }, error => {
            this.notificationHandler.notify({ severity: 'error', details: error.userMessage });
          });
      }
    });
  }

  onScrollEvent(event) {

    if (event.target.className.indexOf("active-y") > 0) {
      this.ediAddressAfter += 20;
      if (this.ediAddressAfter < this.totalEdiAddress) {
        this.getEdiAddressList(this.ediAddressAfter);
      } else {
        this.notificationHandler.notify({ severity: 'success', title: this.translator.instant("onboarding.invitationForm.scrollEvent") });
      }
    }
  }

  getEdiAddressList(after: number) {
    this.onboardingService.getEdiAddressList(this.ediAddressLimit, after).subscribe(
      data => {
        if (data['responseDetails']['success']) {
          this.ediAddressList = this.ediAddressList.concat(data['responseDetails']['responseEntity'].itemList);
        }
      }, error => {
        if (this.isEdiAddressMandatory)
          this.notificationHandler.notify({ severity: 'error', details: error.userMessage });
      });
  }


  onSelectFile(event) {
    this.invitation.imageContent = null;
    // called each time file input changes
    if (event.target.files && event.target.files[0]) {
      var reader = new FileReader();
      reader.onload = (event: any) => {
        this.url = event.target.result;
      }
      if (event.target.files[0].size / 1024 / 1024 > 1) {
        this.notificationHandler.notify({ severity: 'warning', title: 'Files bigger than 1MB are not allowed' })
      } else {
        this.uploadImage = event.target.files[0];
        reader.readAsDataURL(event.target.files[0]);
      }

    }

  }

  imgError($event) {
    let errMsg = "";
    this.translator.get("onboarding.invitationForm.validationMsgs.corruptImage").subscribe(res => { errMsg = res; });
    this.notificationHandler.notify({
      severity: 'warning',
      title: errMsg
    });
    this.url = "";
  }

  onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
  }

  listOfRecipients(action: string, value: string, type: string) {
    if (action == 'add' && type == 'notification' && this.listRecipients.length == 10) {
      this.invalidRecipientMail = true;
      return;
    } else if (action == 'add' && type != 'notification' && this.ccList.length == 10) {
      this.invalidCCMail = true;
      return;
    }
    this.invalidRecipientMail = false;
    this.invalidCCMail = false;
    this.recipientLengthExceeded = false;
    this.ccLengthExceeded = false;
    if (value == undefined || value == '')
      return;

    let pattern = this.emailRegex;
    if (!value.match(pattern)) {
      if (type == 'notification') {
        this.invalidRecipientMail = true;
        return;
      } else {
        this.invalidCCMail = true;
        return;
      }

    } else {
      let emails = value.split(",");
      emails.forEach(email => {
        if (email.length > 50 && type == 'notification') {
          this.invalidRecipientMail = true;
          this.recipientLengthExceeded = true;
          return;
        } else if (email.length > 50 && type != 'notification') {
          this.invalidCCMail = true;
          this.ccLengthExceeded = true;
          return;
        }
      })
      if ((type == 'notification' && this.invalidRecipientMail) || (type != 'notification' && this.invalidCCMail)) {
        return;
      }
      if (type == 'notification') {
        this.invalidRecipientMail = false;
      } else {
        this.invalidCCMail = false;
      }
    }

    if (action == 'add') {
      if (type == 'notification') {
        this.listRecipients = this.listRecipients.concat(value.split(",").filter(this.onlyUnique).map(item => item.trim()));
        this.listRecipients = _.uniq(this.listRecipients);
        this.recipients.nativeElement.value = null;
      } else {
        this.ccList = this.ccList.concat(value.split(",").filter(this.onlyUnique).map(item => item.trim()));
        this.ccList = _.uniq(this.ccList);
        this.ccRecipients.nativeElement.value = null;
      }
    }

    if (action == 'delete') {
      if (type == 'notification') {
        let index = this.listRecipients.indexOf(value);
        this.listRecipients.splice(index, 1);
      } else {
        let index = this.ccList.indexOf(value);
        this.ccList.splice(index, 1);
      }
    }
    if (type == 'notification') {
      this.invitation.notificationEmailRecipients = "";
    } else {
      this.invitation.ccRecipients = "";
    }
  }

  TrackByFunction(index: any, item: any) {
    return index;
  }

  emailChanged(event, index, type) {
    let mailPattern = this.emailRegex;
    if (event.match(mailPattern)) {
      type == 'notification' ? (this.listRecipients[index] = event) : (this.ccList[index] = event);
    }
  }

  onSave() {
    let worfFlowId = this.onboardingService.selectedWorkFlow['workflowId'];
    let formData = new FormData();
    formData.append("file", this.uploadImage);
    this.invitation.editMode = this.editMode;
    let invitationData = JSON.parse(JSON.stringify(this.invitation));

    if (invitationData.approvalType == "AUTOMATIC") {
      invitationData.approvalType = "AUTO";
    }
    invitationData.emailNotify = invitationData.emailNotify == true ? "Y" : "N";
    if (this.editMode == false && invitationData.invitingCoEdiAddr) {
      let coEdiAddressArray = invitationData.invitingCoEdiAddr;
      invitationData.invitingCoEdiAddr = coEdiAddressArray.slice(0, 1)[0].ediAddress;
      let coEdiAddress = coEdiAddressArray.map(address => { return address.ediAddress }).join(",");
      if (coEdiAddressArray.length > 0) {
        this.setInvitationExtendedRequestData(InvitationConstant.edi_address, coEdiAddress);
      }
    }

    this.setInvitationExtendedRequestData(InvitationConstant.last_sent_from, invitationData.senderEmailAddr);
    invitationData.invitationExpirationDate = this.datePipe.transform(invitationData.invitationExpirationDate, 'MM/dd/yyyy');
    if (this.editMode == true) {
      invitationData.invitationSubject = this.invitation.subject;
    }
    invitationData.emailMessage = "<SUBJECT>" + (invitationData.invitationSubject ? invitationData.invitationSubject : "") + "</SUBJECT>"
      + "<CONTENT>" + (invitationData.content ? invitationData.content : "") + "</CONTENT>";

    if (this.editMode == true) {
      invitationData.invitationExpirationDate = this.datePipe.transform(invitationData.invitationExpirationDate, 'yyyy-MM-dd');

    }
    invitationData.notificationEmailRecipients = this.listRecipients.filter(this.onlyUnique).toString();
    invitationData.ccRecipients = this.ccList.filter(this.onlyUnique).toString();

    invitationData.invitationExtendedRequest = this.invitationExtendedRequest;
    formData.append('invitation', new Blob([JSON.stringify(invitationData)], {
      type: "application/json"
    }));
    if (this.editMode == false) {
      this.onboardingService.createInvitation(formData).subscribe(result => {
        this.notificationHandler.notify({
          severity: 'success',
          title: this.translator.instant("onboarding.invitationForm.invitationSaveSuccess")
        });
        this.router.navigate(['onboarding/workflow/' + worfFlowId + '/invitations'], { skipLocationChange: true });
      },
        error => {
          if (error.restErrorCode == "TGOCPREST-1414")
            error.userMessage = this.translator.instant("onboarding.invitationForm.invitationSaveFailure")
          this.notificationHandler.notify({ severity: 'error', title: error.userMessage, details: error.restErrorDetails });
        });
    }
    else {
      this.onboardingService.updateInvitation(formData).subscribe(result => {
        this.notificationHandler.notify({
          severity: 'success',
          title: this.translator.instant("onboarding.invitationForm.invitationUpdateSuccess")
        });
        this.router.navigate(['onboarding/workflow/' + worfFlowId + '/invitations'], { skipLocationChange: true });
      },
        error => {
          if (error.restErrorCode == "TGOCPREST-1414")
            error.userMessage = this.translator.instant("onboarding.invitationForm.invitationUpdateFailure")
          this.notificationHandler.notify({ severity: 'error', title: error.userMessage, details: error.restErrorDetails });
        });
    }

  }

  preview() {
    this.invitation.ediAddressList = this.ediAddressLimit;
    this.invitation.ediAddressCount = this.totalEdiAddress;
    this.invitation.url = this.url;
    if (this.invitation.subject)
      this.invitation.invitationMessage.subject = this.invitation.subject;

    let worfFlowId = this.onboardingService.selectedWorkFlow['workflowId'];
    if (this.editMode == true) {
      this.router.navigate(['onboarding/workflow/' + worfFlowId + '/invitations/preview'], { skipLocationChange: true });
      this.invitation.editMode = this.editMode;
    }
    else {
      this.router.navigate(['onboarding/workflow/' + worfFlowId + '/invitations/preview'], { skipLocationChange: true });
    }
    if (this.listRecipients.length > 0) {
      this.invitation.notificationEmailRecipients = this.listRecipients.join();
      this.invitation.ccRecipients = this.ccList.join();
    }
    this.invitation.imageproperties = this.uploadImage;
    this.onboardingService.setCachedInvitationData(this.invitation);
  }

  setInvitationExtendedRequestData(invitationAttrName, invitationAttrValue) {
    this.invitationExtendedRequest.push({
      "invitationAttrName": invitationAttrName,
      "invitationAttrValue": invitationAttrValue
    })
  }
  cancel() {
    let worfFlowId = this.onboardingService.selectedWorkFlow['workflowId'];
    this.router.navigate(['onboarding/workflow/' + worfFlowId + '/invitations'], { skipLocationChange: true })
  }
  deleteImage() {
    if (this.invitation.imageContent != null) {
      this.invitation.imageContent = '';
    }
    this.url = '';
    this.uploadImage = '';
  }

  onInput(event) {
    let selectedDate = new Date(event.target.value).getTime();
    let minDate = this.minExpDateValue.getTime();
    let selectdCurrentDate = new Date(event.target.value).toDateString();
    let minimCurrentDate = this.minExpDateValue.toDateString();

    if (selectedDate >= minDate || selectdCurrentDate == minimCurrentDate) {
      this.isDateValid = true;
    }
    else {
      this.isDateValid = false;
    }
  }
  onSelect(event) {
    this.isDateValid = true;
  }

}